# 工作流的名称
name: Docker Image CI

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 允许手动触发
  workflow_dispatch:

# 定义一个名为 "build-and-push" 的作业 (Job)
jobs:
  build-and-push:
    # 指定作业运行的虚拟环境
    runs-on: ubuntu-latest

    # 定义作业的步骤
    steps:
      # 步骤 1: 检出代码
      - name: Check out the repo
        uses: actions/checkout@v4

      # 步骤 2: 登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 3: 登录到 GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- 新增步骤在这里 ---
      # 步骤 4: 设置 QEMU (用于模拟多平台架构，是 Buildx 的最佳实践)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 5: 设置 Docker Buildx
      # 这是解决问题的关键！它会创建一个使用 `docker-container` 驱动的 builder 实例，
      # 这个驱动支持 GHA 缓存等高级功能。
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # --- 新增步骤结束 ---

      # 步骤 6: 提取 Docker 元数据
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.repository }}
            ghcr.io/${{ github.repository }}

      # 步骤 7: 构建并推送到两个镜像仓库
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
